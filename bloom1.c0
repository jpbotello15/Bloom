
#use <string>
#use <util>


typedef struct bloom_filter bloom;

struct bloom_filter {
  bool[] data;
  int capacity;
};

bool is_expected_len(bool[] A, int length){
  //@assert \length(A) == length;
  return true;
}

int hash_mul31(string x)
//@ensures \result >= 0 && \result <= int_max();
{
  int result = 0;
  int len = string_length(x);

  for(int i = 0; i < len; i++)
    //@loop_invariant 0 <= i && i <= len;
    {
      result = result * 31 + char_ord(string_charat(x, i));
    }
  if (result < 0) result = result * -1;
  return result;
}


bool is_bloom(bloom* B) {
  if (B == NULL) return false;
  if (B->capacity == 0) return false;
  //@assert \length(B->data) != 0;
  if (!is_expected_len(B->data,B->capacity)) return false;
  return true;
}

bloom* bloom_new(int capacity)
//@requires capacity > 0;
//@ensures is_bloom(\result);
{
  bloom* B = alloc(bloom);
  B->data = alloc_array(bool,capacity);
  B->capacity = capacity;
  return B;
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
{
  int index = hash_mul31(x) % B->capacity;
  if(B->data[index] == true) return true;
  return false;
}

void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  int index = hash_mul31(x) % B->capacity;
  B->data[index] = true;
  return;
}

typedef bloom* bloom_t;

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;

bloom_t bloom_new(int capacity)
  /*@requires capacity > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;